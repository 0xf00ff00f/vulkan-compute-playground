#version 460 core

layout (local_size_x = 256) in;
layout (std430, binding = 0) buffer InputBuffer {
    uint minLeadingZeros;
    uint nonceIndexBase;
    uint prefixSize;
    uint messagePrefix[16];
};
layout (std430, binding = 1) buffer ResultBuffer {
    uint resultNonceIndex;
};

// SHA-256 transform based on the public domain implementation by Brad Conte

#define ROTLEFT(a, b) (((a) << (b)) | ((a) >> (32 - (b))))
#define ROTRIGHT(a, b) (((a) >> (b)) | ((a) << (32 - (b))))

#define CH(x, y, z) (((x) & (y)) ^ (~(x) & (z)))
#define MAJ(x, y, z) (((x) & (y)) ^ ((x) & (z)) ^ ((y) & (z)))
#define EP0(x) (ROTRIGHT(x, 2) ^ ROTRIGHT(x, 13) ^ ROTRIGHT(x, 22))
#define EP1(x) (ROTRIGHT(x, 6) ^ ROTRIGHT(x, 11) ^ ROTRIGHT(x, 25))
#define SIG0(x) (ROTRIGHT(x, 7) ^ ROTRIGHT(x, 18) ^ ((x) >> 3))
#define SIG1(x) (ROTRIGHT(x, 17) ^ ROTRIGHT(x, 19) ^ ((x) >> 10))

uint bswap(uint x)
{
    return ((x << 24) & 0xff000000) |
           ((x <<  8) & 0x00ff0000) |
           ((x >>  8) & 0x0000ff00) |
           ((x >> 24) & 0x000000ff);
}

void main(void)
{
    const uint charset[16] = uint[](
        0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, // '0' - '9'
        0x41, 0x42, 0x43, 0x44, 0x45, 0x46);                        // 'A' - 'F'

    const uint k[64] = uint[](
        0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2);

    uint nonceIndex = nonceIndexBase + gl_GlobalInvocationID.x;

    uint message[16];
    for (int i = 0; i < 16; i++)
        message[i] = messagePrefix[i];
    for (int i = 0; i < 8; i++)
    {
        uint byteIndex = prefixSize + i;
        uint shift = (byteIndex % 4) * 8;
        uint c = charset[(nonceIndex >> (4 * i)) & 0xf] << shift;
        message[byteIndex / 4] |= c;
    }

    uint m[64];
    for (int i = 0; i < 16; i++)
        m[i] = bswap(message[i]);
    for (int i = 16; i < 64; i++)
        m[i] = SIG1(m[i - 2]) + m[i - 7] + SIG0(m[i - 15]) + m[i - 16];

    uint state[8] = uint[](0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
                           0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19);

    uint a = state[0];
    uint b = state[1];
    uint c = state[2];
    uint d = state[3];
    uint e = state[4];
    uint f = state[5];
    uint g = state[6];
    uint h = state[7];

    for (int i = 0; i < 64; i++)
    {
        const uint t1 = h + EP1(e) + CH(e, f, g) + k[i] + m[i];
        const uint t2 = EP0(a) + MAJ(a, b, c);
        h = g;
        g = f;
        f = e;
        e = d + t1;
        d = c;
        c = b;
        b = a;
        a = t1 + t2;
    }

    state[0] += a;
    state[1] += b;
    state[2] += c;
    state[3] += d;
    state[4] += e;
    state[5] += f;
    state[6] += g;
    state[7] += h;

    // count leading zeros
    uint leadingZeros = 0;
    bool done = false;
    for (int i = 0; i < 8; i++) {
        for (int j = 31; j >= 0; j--) {
            if ((state[i] & (1u << j)) != 0u) {
                done = true;
                break;
            }
            ++leadingZeros;
        }
        if (done)
            break;
    }

    if (leadingZeros >= minLeadingZeros) {
        // found it!
        atomicExchange(resultNonceIndex, nonceIndex);
    }
}
